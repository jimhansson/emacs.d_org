
Archived entries from file c:/Users/jiha/Documents/GitHub/emacs.d_org/emacs.org
    
* DONE tell aboudreault if it works
  :PROPERTIES:
  :ARCHIVE_TIME: 2012-09-28 fr 10:40
  :ARCHIVE_FILE: c:/Users/jiha/Documents/GitHub/emacs.d_org/emacs.org
  :ARCHIVE_OLPATH: OrgMode/Auto Archiving of done entries
  :ARCHIVE_CATEGORY: emacs
  :ARCHIVE_TODO: DONE
  :END:
  it does not. hangs emacs

* Google Weather																												:org:
	:PROPERTIES:
	:ARCHIVE_TIME: 2012-10-11 to 16:56
	:ARCHIVE_FILE: c:/Users/jiha/Documents/GitHub/emacs.d_org/emacs.org
	:ARCHIVE_OLPATH: Google Integration
	:ARCHIVE_CATEGORY: emacs
	:END:

	#+begin_src emacs-lisp
		(add-to-list 'load-path (concat local-emacs-org-dir "google-weather"))
		(when (require 'google-weather nil 'noerror))
	#+end_src

	The function are documented, therefore you should not have any
	difficulty to use them.

	If you want to use org-google-weather to add weather forecasts in
	your agenda, just add the following in your .emacs.

	#+begin_src emacs-lisp
		(when (require 'org-google-weather nil 'noerror)
			;; We have the icons in a subdirectory
			(setq org-google-weather-icon-directory (concat local-emacs-org-dir 
																											"google-weather-icons"))
			;; here we map icons names to different weather conditions
			;; on windows we use png's else svg's
			(if (eq system-type 'windows-nt)
					(setq org-google-weather-icon-alist
								'((chance_of_rain . "weather-showers-scattered.png")
									(chance_of_snow . "weather-snow.png")
									(chance_of_storm . "weather-storm.png")
									(cn_cloudy . "weather-overcast.png")
									(cn_heavyrun . "weather-showers.png")
									(cn_sunny . "weather-clear.png")
									(cloudy . "weather-overcast.png")
									(dust . "weather-fog.png")
									(flurries . "weather-storm.png")
									(fog . "weather-fog.png")
									(haze . "weather-fog.png")
									(icy . "weather-snow.png")
									(jp_sunny . "weather-clear.png")
									(jp_cloudy . "weather-overcast.png")
									(mist . "weather-storm.png")
									(mostly_cloudy . "weather-overcast.png")
									(mostly_sunny . "weather-clear.png")
									(partly_cloudy . "weather-few-clouds.png")
									(rain . "weather-showers.png")
									(rain_snow . "weather-snow.png")
									(sleet . "weather-snow.png")
									(smoke . "weather-fog.png")
									(snow . "weather-snow.png")
									(storm . "weather-storm.png")
									(thunderstorm . "weather-storm.png")
									(sunny . "weather-clear.png")))
				(setq org-google-weather-icon-alist
								'((chance_of_rain . "weather-showers-scattered.svg")
									(chance_of_snow . "weather-snow.svg")
									(chance_of_storm . "weather-storm.svg")
									(cn_cloudy . "weather-overcast.svg")
									(cn_heavyrun . "weather-showers.svg")
									(cn_sunny . "weather-clear.svg")
									(cloudy . "weather-overcast.svg")
									(dust . "weather-fog.svg")
									(flurries . "weather-storm.svg")
									(fog . "weather-fog.svg")
									(haze . "weather-fog.svg")
									(icy . "weather-snow.svg")
									(jp_sunny . "weather-clear.svg")
									(jp_cloudy . "weather-overcast.svg")
									(mist . "weather-storm.svg")
									(mostly_cloudy . "weather-overcast.svg")
									(mostly_sunny . "weather-clear.svg")
									(partly_cloudy . "weather-few-clouds.svg")
									(rain . "weather-showers.svg")
									(rain_snow . "weather-snow.svg")
									(sleet . "weather-snow.svg")
									(smoke . "weather-fog.svg")
									(snow . "weather-snow.svg")
									(storm . "weather-storm.svg")
									(thunderstorm . "weather-storm.svg")
									(sunny . "weather-clear.svg")))))
	#+end_src
	Then, add the following in one of your Org file.

	#+begin_example
		* Weather
			%%(org-google-weather "New York")
	#+end_example

	You can set the language as second argument. You should know that
	the unit system used is language dependent. By default, American
	English is used, therefore with Fahrenheit degrees, but if you want
	to have English with Celsius degrees, you can use "en-gb".
*** TODO find out why emacs for windows does not support svg, and fix it.
		The svgs looks so much nicer.
*** TODO modify the svg's to be smaller.
*** TODO We want weather first on every day
		tried setting with high priority that may bump it up the
		agenda. will have to check that at home.
*** DONE copy icons for the different weather symbols.
		we need the symbols from [[/usr/share/icons/gnome/16x16/status]] to be
		added to the repo so we also have them on windows. 
		these are the one needed.
		- "weather-clear.png")
		- "weather-few-clouds.png")
		- "weather-fog.png")
		- "weather-overcast.png")
		- "weather-showers-scattered.png")
		- "weather-showers.png")
		- "weather-snow.png")
		- "weather-storm.png")
*** DONE make sure it works on windows with svg or else change to png's
		:LOGBOOK:
		CLOCK: [2012-08-21 ti 11:11]--[2012-08-21 ti 11:13] =>  0:02
		- I does not work with svg, need png's on windows. emacs on
			windows does not support svg.
		CLOCK: [2012-08-20 må 10:35]--[2012-08-20 må 11:46] =>  1:11
		:END:
* Remember
	:PROPERTIES:
	:ARCHIVE_TIME: 2012-10-13 lö 10:36
	:ARCHIVE_FILE: c:/Users/jiha/Documents/GitHub/emacs.d_org/emacs.org
	:ARCHIVE_CATEGORY: emacs
	:END:
  
  I don't use remember as much at the moment but some day or some
  other function once I have found out which I shall use. Most of this
  has been copied from someones GTD.org setup.

  #+begin_src emacs-lisp
    (autoload 'remember "remember" nil t)
    (autoload 'remember-region "remember" nil t)
    (setq remember-annotation-functions '(org-remember-annotation))
    (setq remember-handler-functions '(org-remember-handler))
    (add-hook 'remember-mode-hook 'org-remember-apply-template)
    (setq org-remember-templates
         '(
          ("Todo" ?t "** TODO %^{Brief Description} %^g\n%?\nAdded: %U" "~/Dokument/GTD/gtd.org" "Tasks")
          ("Private" ?p "\n* %^{topic} %T \n%i%?\n" "~/Dokument/GTD/gtd.org" "Private")
          ("WordofDay" ?w "\n* %^{topic} \n%i%?\n" "~/Dokument/GTD/wotd.org")
          ))
  #+end_src

* DONE cleanup
	:LOGBOOK:
	- State "DONE"       from "TODO"       [2012-10-12 fr 11:02]
	:END:
	:PROPERTIES:
	:ARCHIVE_TIME: 2012-10-15 må 10:56
	:ARCHIVE_FILE: c:/Users/jiha/Documents/GitHub/emacs.d_org/emacs.org
	:ARCHIVE_OLPATH: Minor Modes/Auto-complete
	:ARCHIVE_CATEGORY: emacs
	:ARCHIVE_TODO: DONE
	:END:
	why do I have both auto-complete and auto-complete-1.3.1
	directory. I should only have one and that one should be a
	submodule instead. and one from elpa!
* DONE change this to be a submodule instead
	:LOGBOOK:
	- State "DONE"       from "TODO"       [2012-10-11 to 16:04]
	:END:
	:PROPERTIES:
	:ARCHIVE_TIME: 2012-10-18 to 22:49
	:ARCHIVE_FILE: c:/Users/jiha/Documents/GitHub/emacs.d_org/emacs.org
	:ARCHIVE_OLPATH: Coding/CEDET
	:ARCHIVE_CATEGORY: emacs
	:ARCHIVE_TODO: DONE
	:END:

* DONE move everthing out of Introduction that does not belong there
	:LOGBOOK:
	- State "DONE"			 from "TODO"			 [2013-03-03 sö 22:19] \\
		done
	:END:
	:PROPERTIES:
	:ARCHIVE_TIME: 2013-03-15 fr 10:11
	:ARCHIVE_FILE: c:/Users/jiha/Documents/GitHub/emacs.d_org/emacs.org
	:ARCHIVE_OLPATH: Introduction
	:ARCHIVE_CATEGORY: emacs
	:ARCHIVE_TODO: DONE
	:END:
	Introduction should only be about requirements and about this
	config, not really do any configuration.
* DONE Rework
	:LOGBOOK:
	- State "DONE"			 from "NEXT"			 [2013-03-03 sö 21:23] \\
		yeah!!!
	CLOCK: [2013-03-03 sö 19:39]--[2013-03-03 sö 21:23] =>	1:44
	CLOCK: [2013-03-03 sö 15:34]--[2013-03-03 sö 16:38] =>	1:04
	:END:
	:PROPERTIES:
	:ARCHIVE_TIME: 2013-03-20 on 23:39
	:ARCHIVE_FILE: c:/Users/jiha/Documents/GitHub/emacs.d_org/emacs.org
	:ARCHIVE_OLPATH: OrgMode
	:ARCHIVE_CATEGORY: emacs
	:ARCHIVE_TODO: DONE
	:END:

	this to support more that 2 different org directories and to not
	make a difference bewtween them as much as possible.

* DONE tabs in org-mode
	:LOGBOOK:
	- State "DONE"       from "TODO"       [2013-03-04 må 00:10] \\
		decided to use tabs instead.
	:END:
	:PROPERTIES:
	:ARCHIVE_TIME: 2013-03-20 on 23:39
	:ARCHIVE_FILE: c:/Users/jiha/Documents/GitHub/emacs.d_org/emacs.org
	:ARCHIVE_OLPATH: OrgMode
	:ARCHIVE_CATEGORY: emacs
	:ARCHIVE_TODO: DONE
	:END:
	should not use tabs for indentation in org-mode.

* DONE add local directory for storing extra schemsa
	:LOGBOOK:
	- State "DONE"       from "TODO"       [2013-03-17 sö 13:23]
	:END:
	:PROPERTIES:
	:ARCHIVE_TIME: 2013-03-20 on 23:40
	:ARCHIVE_FILE: c:/Users/jiha/Documents/GitHub/emacs.d_org/emacs.org
	:ARCHIVE_OLPATH: Major Modes/nXML
	:ARCHIVE_CATEGORY: emacs
	:ARCHIVE_TODO: DONE
	:END:
* DONE Schema for soap and wsdl
	:LOGBOOK:
	- State "DONE"       from "TODO"       [2013-03-17 sö 21:12] \\
		Somewhat done wsdl/wsdl1.rnc funkar någolunda.
	:END:
	:PROPERTIES:
	:ARCHIVE_TIME: 2013-03-20 on 23:40
	:ARCHIVE_FILE: c:/Users/jiha/Documents/GitHub/emacs.d_org/emacs.org
	:ARCHIVE_OLPATH: Major Modes/nXML
	:ARCHIVE_CATEGORY: emacs
	:ARCHIVE_TODO: DONE
	:END:
    
* DONE setup what org-modules we should have
	:LOGBOOK:
	- State "DONE"       from "TODO"       [2013-03-28 to 22:41]
	:END:
	:PROPERTIES:
	:ARCHIVE_TIME: 2013-03-28 to 22:41
	:ARCHIVE_FILE: c:/Users/jiha/Documents/GitHub/emacs.d_org/emacs.org
	:ARCHIVE_OLPATH: OrgMode/Org Capture
	:ARCHIVE_CATEGORY: emacs
	:ARCHIVE_TODO: DONE
	:END:

	at the moment this is done on by customize and that means we need
	to do it on every machine.

* DONE solve the problem with default notes file.
	:LOGBOOK:
	- State "DONE"			 from "TODO"			 [2013-03-03 sö 22:15] \\
		Not a problem when all my templates contain a target.
	:END:
	:PROPERTIES:
	:ARCHIVE_TIME: 2013-03-28 to 22:42
	:ARCHIVE_FILE: c:/Users/jiha/Documents/GitHub/emacs.d_org/emacs.org
	:ARCHIVE_OLPATH: OrgMode/Org Capture
	:ARCHIVE_CATEGORY: emacs
	:ARCHIVE_TODO: DONE
	:END:














* DONE word-list for org-files.
	:LOGBOOK:
	- State "DONE"       from "TODO"       [2013-03-29 fr 16:13] \\
		not needed, works somewhat fine now.
	:END:
	:PROPERTIES:
	:ARCHIVE_TIME: 2013-03-29 fr 16:19
	:ARCHIVE_FILE: c:/Users/jiha/Documents/GitHub/emacs.d_org/emacs.org
	:ARCHIVE_OLPATH: Minor Modes/Fly-spell
	:ARCHIVE_CATEGORY: emacs
	:ARCHIVE_TODO: DONE
	:END:
	
	org-files contains some reserved words like #+begin_* ... these
	should be included in some sort of wordlist we use. so we don't get
	a lot of errors on those files.


* DONE Avoid false positives
	:LOGBOOK:
	- State "DONE"       from "TODO"       [2013-03-29 fr 16:18] \\
		looks like it work now with later versions of org-mode
	:END:
	:PROPERTIES:
	:ARCHIVE_TIME: 2013-03-29 fr 16:19
	:ARCHIVE_FILE: c:/Users/jiha/Documents/GitHub/emacs.d_org/emacs.org
	:ARCHIVE_OLPATH: Minor Modes/Fly-spell
	:ARCHIVE_CATEGORY: emacs
	:ARCHIVE_TODO: DONE
	:END:

	I recently started using flyspell and am enjoying its features. Is
	there a way to disable flyspell for certain regexps? For instance,
	I would like to disable flyspell when typing a url. Otherwise, when
	entering a url such as
	http://www.emacswiki.org/cgi-bin/emacs/FlySpell, www, emacswiki,
	cgi and FlySpell are highlighted as errors. Any advice would be
	greatly appreciated. – MattLundin 

	There is only one way, using flyspell-generic-check-word-predicate
	which should be a function. In such a function you can use thing at
	point. 

	However it is a bit difficult to manage this as this variable may
	be only one function. I have submitted a patch to Emacs devel to
	take care of this. 

	Thanks for pointing me to the flyspell-generic-check-word-predicate
	variable. – MattLundin


* DONE Windows
	:LOGBOOK:
	- State "DONE"       from "TODO"       [2013-03-29 fr 16:16] \\
		Solved it another way, using aspell.
	:END:
	:PROPERTIES:
	:ARCHIVE_TIME: 2013-03-29 fr 16:19
	:ARCHIVE_FILE: c:/Users/jiha/Documents/GitHub/emacs.d_org/emacs.org
	:ARCHIVE_OLPATH: Minor Modes/Fly-spell
	:ARCHIVE_CATEGORY: emacs
	:ARCHIVE_TODO: DONE
	:END:
	
	we need to install cygwin and use aspell.
	http://curiousprogrammer.wordpress.com/2009/04/25/flyspell-windows/


* DONE instead of using setq for vars use let expression
	:LOGBOOK:
	- State "DONE"       from "NEXT"       [2013-03-29 fr 08:55]
	:END:
	:PROPERTIES:
	:ARCHIVE_TIME: 2013-03-29 fr 16:19
	:ARCHIVE_FILE: c:/Users/jiha/Documents/GitHub/emacs.d_org/emacs.org
	:ARCHIVE_OLPATH: OrgMode/Post
	:ARCHIVE_CATEGORY: emacs
	:ARCHIVE_TODO: DONE
	:END:


* DONE work jornal
	:LOGBOOK:
	- State "DONE"       from "TODO"       [2013-03-29 fr 08:58] \\
		Have been implemented with org-capture and a datetree, the shortcuts are sj
		and wj for shared and for work journal.
	:END:
	:PROPERTIES:
	:ARCHIVE_TIME: 2013-03-29 fr 16:19
	:ARCHIVE_FILE: c:/Users/jiha/Documents/GitHub/emacs.d_org/emacs.org
	:ARCHIVE_OLPATH: OrgMode
	:ARCHIVE_CATEGORY: emacs
	:ARCHIVE_TODO: DONE
	:END:
	
	once maybe twice a week I would like to log what I have done that week it would be
	nice with a capture template for that, a personal jornal would also be nice but may be
	harder to fix because of that I could not hardcode the path to the file. maybe using
	local config could fix that.


* DONE instead of using setq for vars use let expression
	:LOGBOOK:
	- State "DONE"       from "TODO"       [2013-03-29 fr 08:57]
	:END:
	:PROPERTIES:
	:ARCHIVE_TIME: 2013-03-29 fr 16:19
	:ARCHIVE_FILE: c:/Users/jiha/Documents/GitHub/emacs.d_org/emacs.org
	:ARCHIVE_OLPATH: OrgMode/Init
	:ARCHIVE_CATEGORY: emacs
	:ARCHIVE_TODO: DONE
	:END:

* DONE Elpa does not add things to load path
	:LOGBOOK:
	- State "DONE"       from "TODO"       [2013-03-29 fr 16:25]
	:END:
	:PROPERTIES:
	:ARCHIVE_TIME: 2013-03-29 fr 16:25
	:ARCHIVE_FILE: c:/Users/jiha/Documents/GitHub/emacs.d_org/emacs.org
	:ARCHIVE_OLPATH: Bugs
	:ARCHIVE_CATEGORY: emacs
	:ARCHIVE_TODO: DONE
	:END:
	this need to be taken care of by elpa so I don't need to hardcode
	paths with versions in them.


* DONE fix line spacing
	:LOGBOOK:
	- State "DONE"       from "TODO"       [2013-04-25 to 23:18]
	:END:
	:PROPERTIES:
	:ARCHIVE_TIME: 2013-04-25 to 23:25
	:ARCHIVE_FILE: c:/Users/jiha/Documents/GitHub/emacs.d_org/emacs.org
	:ARCHIVE_OLPATH: Bugs
	:ARCHIVE_CATEGORY: emacs
	:ARCHIVE_TODO: DONE
	:END:
	some extra linespacing would be nice, I have at the moment set it in my .emacs on my work-machine

* DONE Make sure not installed packages does not crash startup
	:LOGBOOK:
	- State "DONE"       from "TODO"       [2013-04-25 to 23:07]
	CLOCK: [2013-04-25 to 17:59]--[2013-04-25 to 23:07] =>  5:08
	:PROPERTIES:
	:ARCHIVE_TIME: 2013-04-25 to 23:25
	:ARCHIVE_FILE: c:/Users/jiha/Documents/GitHub/emacs.d_org/emacs.org
	:ARCHIVE_OLPATH: Bugs
	:ARCHIVE_CATEGORY: emacs
	:ARCHIVE_TODO: DONE
	:END:
	- implemented a jiha-safe-require that will log if something is missing, but will not
		error out.
	:END:
	all usage of packages from melpa, marmelade... in this configuration need to be
	enclosed in constructs that will not crash startup when they do not exists. 


* DONE check out multiple cursors
	:LOGBOOK:
	- State "DONE"       from "TODO"       [2013-04-15 må 23:43] \\
		installed from melpa
	:END:
	:PROPERTIES:
	:ARCHIVE_TIME: 2013-04-25 to 23:25
	:ARCHIVE_FILE: c:/Users/jiha/Documents/GitHub/emacs.d_org/emacs.org
	:ARCHIVE_OLPATH: Bugs
	:ARCHIVE_CATEGORY: emacs
	:ARCHIVE_TODO: DONE
	:END:

* DONE check out expand-region
	:LOGBOOK:
	- State "DONE"       from "TODO"       [2013-04-15 må 23:25] \\
		installed from melpa
	:END:
	:PROPERTIES:
	:ARCHIVE_TIME: 2013-04-25 to 23:25
	:ARCHIVE_FILE: c:/Users/jiha/Documents/GitHub/emacs.d_org/emacs.org
	:ARCHIVE_OLPATH: Bugs
	:ARCHIVE_CATEGORY: emacs
	:ARCHIVE_TODO: DONE
	:END:

* DONE fix face of hl-line so it does not interfer with other things.
	:LOGBOOK:
	- State "DONE"       from "TODO"       [2013-04-25 to 23:14]
	:END:
	:PROPERTIES:
	:ARCHIVE_TIME: 2013-04-25 to 23:25
	:ARCHIVE_FILE: c:/Users/jiha/Documents/GitHub/emacs.d_org/emacs.org
	:ARCHIVE_OLPATH: Minor Modes/Hl-Line
	:ARCHIVE_CATEGORY: emacs
	:ARCHIVE_TODO: DONE
	:END:


* TODO advice tabify/untabify to use the whole buffer if no region is marked.
	 :LOGBOOK:
	 CLOCK: [2014-02-04 ti 12:15]--[2014-02-04 ti 15:22] =>  3:07
	 :END:
	:PROPERTIES:
	:ARCHIVE_TIME: 2014-02-04 ti 12:54
	:ARCHIVE_FILE: c:/Users/jiha/Documents/GitHub/emacs.d_org/emacs.org
	:ARCHIVE_OLPATH: Bugs
	:ARCHIVE_CATEGORY: emacs
	:ARCHIVE_TODO: TODO
	:END:
	 #+BEGIN_SRC elisp
		 (defadvice tabify (around mark-whole-buffer-if-no-region activate)
			 "When using tabify without marking a region, the normal thing in emacs is to do tabify
		 on everthing below point, this feel unatural, this changes that to instead do it on the
		 whole buffer."
			 (save-excursion
				 (if (not (region-active-p)) 
						 (progn
							 (mark-whole-buffer)
							 (ad-do-it)))))
			 
	 #+END_SRC

	 #+RESULTS:
	 : tabify

	 #+BEGIN_SRC elisp
	 (ad-disable-advice 'tabify 'before 'mark-whole-buffer-if-no-region)
	 #+END_SRC

 #+RESULTS:


* CANCELLED check out smex.
	:LOGBOOK:
	- State "CANCELLED"  from "TODO"       [2014-02-04 ti 13:06]
	:END:
	:PROPERTIES:
	:ARCHIVE_TIME: 2014-06-09 må 15:01
	:ARCHIVE_FILE: c:/Users/jiha/Documents/GitHub/emacs.d_org/emacs.org
	:ARCHIVE_OLPATH: Bugs
	:ARCHIVE_CATEGORY: emacs
	:ARCHIVE_TODO: CANCELLED
	:END:


* FIXED [[*Iswitch%20Buffers][Iswitch Buffers]] has problem on windows with defining my own columns
	:LOGBOOK:
	CLOCK: [2013-09-23 må 16:26]--[2013-09-23 må 16:40] =>  0:14
	- by defining ibuffer-inline-columns before it is used, I get around the
		problem. Maybe i should require something instead.
	CLOCK: [2013-07-02 ti 23:25]--[2013-07-02 ti 23:27] =>  0:02
	:END:
	:PROPERTIES:
	:ARCHIVE_TIME: 2014-06-09 må 15:01
	:ARCHIVE_FILE: c:/Users/jiha/Documents/GitHub/emacs.d_org/emacs.org
	:ARCHIVE_OLPATH: Bugs
	:ARCHIVE_CATEGORY: emacs
	:ARCHIVE_TODO: FIXED
	:END:
	have comment out the src section

	It seems to work now, will leave the bug for now. might resurface and in that case i
	will write more about it.

	tried starting emacs again, it did not work, commented out the region again.

* FIXED we maybe should remove flyspell-prog-mode from languages hooks
	:LOGBOOK:
	CLOCK: [2013-06-13 to 13:44]--[2013-06-13 to 15:01] =>  1:17
	- State "FIXED"      from "TODO"       [2013-06-13 to 15:01] \\
		Fixed now, but need to add modes that tells what to use.
	:PROPERTIES:
	:ARCHIVE_TIME: 2014-06-09 må 15:01
	:ARCHIVE_FILE: c:/Users/jiha/Documents/GitHub/emacs.d_org/emacs.org
	:ARCHIVE_OLPATH: Bugs
	:ARCHIVE_CATEGORY: emacs
	:ARCHIVE_TODO: FIXED
	:END:
	- Refiled on [2013-06-12 on 01:17] \\
		should not have issues spread out in the file
	:END:
	and instead implement a jiha-flyspell-mode that will activate flyspell-prog-mode if
	the major mode is a programming mode and "vanilla" flyspell-mode when it is
	not. and bind that to *C-<F8>*.

