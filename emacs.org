# -*- mode: org -*-
#+TITLE: My emacs configuration
#+AUTHOR: Jim Hansson
#+EMAIL: jim.hansson@gmail.com
#+DATE: <2012-06-28 tor>

This is my main .emacs file. It is responsible for calling out to the
local file at different points. This is placed in a git repository
that I share between work and home

* Requirements

  - Emacs 24
  - a basic .emacs file that calls this after it inits org-babel 
  - a lot of extra packages. most configuration will check for it

* Basic
  
  Basic things that could have been down throu custom-set-variable but
  then I would have harder time to replicate that between machines.

** Setup

   Here we setup some basic things, I dont like the toolbar so that we
   turn off, I use OrgMode to almost everything(even my .emacs) so
   that will be my default mode. 

   #+begin_src emacs-lisp
     (tool-bar-mode -1)
     (setq default-major-mode 'org-mode)
     (add-hook 'text-mode-hook 'turn-on-auto-fill)
   #+end_src

** Org-Mode

   #+begin_src emacs-lisp
     (setq org-deadline-warning-days 7)
     (setq org-timeline-show-empty-dates t)
     (setq org-agenda-include-diary nil)
   #+end_src

** Disable warnings for first time users
   
   For some reason some questions in emacs are yes/no and some are y/n
   this trips me sometimes so we turn that of, and the same goes for
   killing emacs. We also removes some questions that are asked to
   make sure that the users really wants what is going to happen, I
   know how to use undo and else I usually have some version control
   system running so I can go back.

   #+begin_src emacs-lisp
   ;; Changes all yes/no questions to y/n type
   (fset 'yes-or-no-p 'y-or-n-p)
   (set-variable 'confirm-kill-emacs 'yes-or-no-p)
   ;; more of these as I find them
   (put 'narrow-to-region 'disabled nil)
   #+end_src

** Other Setup
   #+begin_src emacs-lisp
     ; dont use tabs for indenting
     (setq-default indent-tabs-mode nil)
     
     (add-to-list 'auto-mode-alist '("\\.org$" . org-mode))
     (define-key global-map "\C-cl" 'org-store-link)
     (define-key global-map "\C-ca" 'org-agenda)
     
     (setq org-log-done nil)
     (setq org-deadline-warning-days 7)
     (setq org-timeline-show-empty-dates t)
     (setq org-insert-mode-line-in-empty-file t)
     
     (autoload 'remember "remember" nil t)
     (autoload 'remember-region "remember" nil t)
     
     (setq org-directory "~/Dokument/orgfiles/")
     (setq org-default-notes-file "~/.notes")
     (setq remember-annotation-functions '(org-remember-annotation))
     (setq remember-handler-functions '(org-remember-handler))
     (add-hook 'remember-mode-hook 'org-remember-apply-template)
     (define-key global-map "\C-cr" 'org-remember)
     
     (setq org-remember-templates
          '(
           ("Todo" ?t "** TODO %^{Brief Description} %^g\n%?\nAdded: %U" "~/Dokument/GTD/gtd.org" "Tasks")
           ("Private" ?p "\n* %^{topic} %T \n%i%?\n" "~/Dokument/GTD/gtd.org" "Private")
           ("WordofDay" ?w "\n* %^{topic} \n%i%?\n" "~/Dokument/GTD/wotd.org")
           ))
     
     (define-key global-map [f8] 'remember)
     (define-key global-map [f9] 'remember-region)
     
     (global-font-lock-mode t)
     
     (global-set-key "\C-x\C-r" 'prefix-region)
     (global-set-key "\C-x\C-l" 'goto-line)
     ;;(global-set-key "\C-x\C-y" 'copy-region-as-kill)
   #+end_src

* Coding

  Here I will place everything that has todo with coding

* OrgMode
   #+begin_src emacs-lisp
     (setq org-agenda-exporter-settings
           '((ps-number-of-columns 1)
             (ps-landscape-mode t)
             (htmlize-output-type 'css)))
     
     (setq org-agenda-custom-commands
           '(
             
             ("P" "Projects"   
              ((tags "PROJECT")))
             
             ("H" "Office and Home Lists"
              ((agenda)
               (tags-todo "OFFICE")
               (tags-todo "HOME")
               (tags-todo "COMPUTER")
               (tags-todo "DVD")
               (tags-todo "READING")))
             
             ("D" "Daily Action List"
              (
               (agenda "" ((org-agenda-ndays 1)
                           (org-agenda-sorting-strategy
                            (quote ((agenda time-up priority-down tag-up) )))
                           (org-deadline-warning-days 0)
                           ))))
             )
           )
     
     (defun gtd ()
       (interactive)
       (find-file "~/Dokument/GTD/gtd.org")
       )
     (global-set-key (kbd "C-c g") 'gtd)
     
     (add-hook 'org-agenda-mode-hook 'hl-line-mode)
     
#+end_src
* Load Local settings
  Last but not least we need to load the part of the .emacs that is
  local to this machine. That is also a org-babel emacs file.
  #+begin_src emacs-lisp
    (add-to-list 'load-path "~/.emacs.d_org/local")
    (org-babel-load-file "~/.emacs.d_org/local/emacs.org")
  #+end_src
